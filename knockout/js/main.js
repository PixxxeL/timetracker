// Generated by CoffeeScript 2.0.1
var TIMETRACKER, formatMilliseconds;

TIMETRACKER = {
  Settings: {
    dataStorageKey: 'timetracker-data'
  },
  Data: {
    current: 'Default',
    data: []
  }
};

formatMilliseconds = function(ms) {
  var hours, minutes, seconds;
  ms = (ms * .001) | 0;
  seconds = ms % 60;
  minutes = ((ms / 60) % 60) | 0;
  hours = (ms / 60 / 60) | 0;
  if (seconds < 10) {
    seconds = `0${seconds}`;
  }
  if (minutes < 10) {
    minutes = `0${minutes}`;
  }
  return `${hours}:${minutes}:${seconds}`;
};

TIMETRACKER.AppViewModel = function() {
  var bindEvents, load, self;
  self = this;
  self.data = ko.observableArray(TIMETRACKER.Data.data);
  self.titles = ko.computed(function() {
    return _.keys(self.data());
  });
  self.current = ko.observable(TIMETRACKER.Data.current);
  self.isSelectProject = ko.observable(false);
  self.isToggleProject = ko.computed(function() {
    return self.titles().length > 1;
  });
  self.diff = ko.observable(0);
  self.currentTimes = ko.computed(function() {
    return self.data()[self.current()] || [];
  });
  self.currentTimesSize = ko.computed(function() {
    return self.currentTimes().length;
  });
  self.totalTime = ko.computed(function() {
    return _.reduce(self.currentTimes(), function(memo, time) {
      return memo + (time.endTs - time.startTs);
    }, 0);
  });
  self.closedTime = ko.computed(function() {
    return _.reduce(self.currentTimes(), function(memo, time) {
      var diff;
      diff = time.closed ? time.endTs - time.startTs : 0;
      return memo + diff;
    }, 0);
  });
  self.current.subscribe(function() {
    return self.save();
  });
  self.data.subscribe(function() {
    return self.save();
  });
  load = function() {
    var data;
    data = window.localStorage.getItem(TIMETRACKER.Settings.dataStorageKey);
    if (data) {
      data = JSON.parse(data);
      self.data(data.data);
      self.current(data.current);
    }
    return null;
  };
  self.save = function() {
    var data;
    data = JSON.stringify({
      current: self.current(),
      data: self.data()
    });
    console.log('save', data);
    window.localStorage.setItem(TIMETRACKER.Settings.dataStorageKey, data);
    return null;
  };
  bindEvents = function() {
    document.addEventListener('mouseup', function(e) {
      var button, select;
      select = document.querySelector('select.select-project');
      button = document.querySelector('a.swap-project');
      if (!select.contains(e.target) && !button.contains(e.target)) {
        return self.isSelectProject(false);
      }
    });
    return null;
  };
  self.formatMilliseconds = formatMilliseconds;
  self.selectProjectClick = function(data, e) {
    e.stopPropagation();
    return null;
  };
  self.toggleSelectProject = function() {
    if (self.isToggleProject()) {
      self.isSelectProject(!self.isSelectProject());
    }
    return null;
  };
  self.addProject = function() {
    var data, title;
    //if startDate
    //    return alert 'Нельзя добавить проект пока работает таймер'
    title = window.prompt('Введите название нового проекта:', '');
    if (title) {
      title = title.trim();
    }
    if (title === null) {
      return;
    }
    if (!title) {
      return window.alert('Вы не ввели название проекта');
    }
    if (self.titles().indexOf(title) !== -1) {
      return window.alert('Такой проект уже существует');
    }
    data = self.data();
    data[title] = [];
    self.data(data);
    self.current(title);
    return null;
  };
  self.removeProject = function() {
    var data;
    //if startDate
    //    return window.alert 'Нельзя удалить проект пока работает таймер'
    if (window.confirm('Вы действительно хотите БЕЗВОЗВРАТНО удалить проект?')) {
      if (self.current() === 'Default') {
        return window.alert('Нельзя удалить проект `Default`');
      }
      data = self.data();
      delete data[self.current()];
      self.data(data);
      self.current('Default');
    }
    return null;
  };
  self.toggleTimer = function() {
    return null;
  };
  load();
  bindEvents();
  return self;
};

TIMETRACKER.TimeViewModel = function(params) {
  var app, self;
  self = this;
  app = params.app;
  self.startTs = ko.observable(params.item.startTs);
  self.endTs = ko.observable(params.item.endTs);
  self.desc = ko.observable(params.item.desc);
  self.closed = ko.observable(params.item.closed);
  self.diff = ko.computed(function() {
    return formatMilliseconds(self.endTs() - self.startTs());
  });
  self.start = ko.computed(function() {
    return new Date(self.startTs()).toLocaleString('ru-RU');
  });
  self.end = ko.computed(function() {
    return new Date(self.endTs()).toLocaleString('ru-RU');
  });
  self.closed.subscribe(app.save);
  return self;
};

ko.components.register('time-row', {
  viewModel: TIMETRACKER.TimeViewModel,
  template: {
    element: 'time-row-tmpl'
  }
});

window.onload = function() {
  return ko.applyBindings(new TIMETRACKER.AppViewModel(), document.getElementById('content-wrapper'));
};
