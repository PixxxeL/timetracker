var TIMETRACKER,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

Vue.directive('click-outside', {
  bind: function(el, binding, vnode) {
    el.clickOutsideEvent = function(e) {
      if (el !== e.target || !el.contains(e.target)) {
        return vnode.context[binding.expression](e);
      }
    };
    return document.body.addEventListener('click', el.clickOutsideEvent);
  },
  unbind: function(el) {
    return document.body.removeEventListener('click', el.clickOutsideEvent);
  }
});

Vue.filter('millis', function(ms) {
  var hours, minutes, seconds;
  ms = (ms * .001) | 0;
  seconds = ms % 60;
  minutes = ((ms / 60) % 60) | 0;
  hours = (ms / 60 / 60) | 0;
  if (seconds < 10) {
    seconds = "0" + seconds;
  }
  if (minutes < 10) {
    minutes = "0" + minutes;
  }
  return hours + ":" + minutes + ":" + seconds;
});

Vue.filter('loctime', function(ts) {
  return new Date(ts).toLocaleString('ru-RU');
});

TIMETRACKER = {
  Settings: {
    dataStorageKey: 'timetracker-data'
  },
  Data: {
    current: 'Default',
    data: {
      'Default': []
    }
  }
};

Vue.component('title-view', {
  template: '#title-tmpl',
  props: ['projects', 'current', 'startDate'],
  data: function() {
    return {
      opened: false,
      selected: this.current
    };
  },
  computed: {
    projectTitles: function() {
      return _.keys(this.projects);
    }
  },
  methods: {
    toggle: function() {
      return this.opened = !this.opened;
    },
    onOutside: function() {
      return this.opened = false;
    },
    add: function() {
      var title;
      if (this.startDate) {
        return alert('Нельзя добавить проект пока работает таймер');
      }
      title = prompt('Введите название нового проекта:');
      title = title.replace(/^\s+|\s+$/g, '');
      if (!title) {
        return alert('Вы не ввели название проекта');
      }
      if (indexOf.call(_.keys(this.projects), title) >= 0) {
        return alert('Такой проект уже существует');
      }
      this.selected = title;
      return this.$emit('add:project', title);
    },
    remove: function() {
      if (this.startDate) {
        return alert('Нельзя удалить проект пока работает таймер');
      }
      if (confirm('Вы действительно хотите БЕЗВОЗВРАТНО удалить проект?')) {
        if (this.selected === 'Default') {
          return alert('Нельзя удалить проект `Default`');
        }
        this.$emit('remove:project', this.selected);
        return this.selected = 'Default';
      }
    },
    select: function() {
      if (this.startDate) {
        return alert('Нельзя добавить проект пока работает таймер');
      }
      return this.$emit('change:current', this.selected);
    }
  }
});

Vue.component('timer-view', {
  template: '#timer-tmpl',
  props: ['projects', 'current', 'startDate'],
  data: function() {
    return {
      running: false
    };
  },
  computed: {
    times: function() {
      return this.projects[this.current] || [];
    },
    total: function() {
      return _.reduce(this.times, function(val, time) {
        return val + (time.endTs - time.startTs);
      }, 0);
    },
    opened: function() {
      return _.chain(this.times).filter(function(time) {
        return !time.closed;
      }).reduce(function(val, time) {
        return val + (time.endTs - time.startTs);
      }, 0).value();
    },
    time: function() {
      if (this.startDate) {
        return new Date().getTime() - this.startDate.getTime();
      } else {
        return 0;
      }
    }
  },
  methods: {
    toggle: function() {
      this.running = !this.running;
      return this.$emit('timer:toggle', this.running);
    }
  }
});

Vue.component('times-view', {
  template: '#times-tmpl',
  props: ['projects', 'current', 'startDate'],
  computed: {
    times: function() {
      return this.projects[this.current] || [];
    },
    exist: function() {
      return this.times.length;
    }
  },
  methods: {
    close: function(time) {
      return this.$emit('times:change', _.map(this.times, function(t) {
        if (t.startTs === time.startTs && t.endTs === time.endTs) {
          t.closed = !t.closed;
        }
        return t;
      }));
    },
    remove: function(time) {
      return this.$emit('times:change', _.filter(this.times, function(t) {
        return t.startTs !== time.startTs && t.endTs !== time.endTs;
      }));
    }
  }
});

Vue.component('time-view', {
  template: '#time-tmpl',
  props: ['time', 'startDate'],
  data: function() {
    return {
      closed: this.time.closed
    };
  },
  computed: {
    diff: function() {
      return this.time.endTs - this.time.startTs;
    }
  },
  methods: {
    close: function() {
      if (this.startDate) {
        return alert('Нельзя учесть пока работает таймер');
      }
      return this.$emit('time:close', this.time);
    },
    remove: function() {
      if (this.startDate) {
        return alert('Нельзя удалить пока работает таймер');
      }
      if (confirm('Действительно хотите удалить\nбез возможности восстановить?')) {
        return this.$emit('time:remove', this.time);
      }
    }
  }
});

window.onload = function() {
  new Vue({
    el: '#app-container',
    template: '#layout-tmpl',
    _loopCounter: 0,
    _curDesc: '',
    data: function() {
      return {
        projects: {},
        current: 'Default',
        startDate: null
      };
    },
    created: function() {
      return this.loadData();
    },
    methods: {
      loadData: function() {
        var err;
        try {
          TIMETRACKER.Data = JSON.parse(window.localStorage.getItem(TIMETRACKER.Settings.dataStorageKey)) || TIMETRACKER.Data;
        } catch (error) {
          err = error;
        }
        this.projects = TIMETRACKER.Data.data;
        return this.current = TIMETRACKER.Data.current;
      },
      saveData: function() {
        return window.localStorage.setItem(TIMETRACKER.Settings.dataStorageKey, JSON.stringify(TIMETRACKER.Data));
      },
      saveAndLoad: function() {
        this.saveData();
        return this.loadData();
      },
      changeCurrent: function(val) {
        TIMETRACKER.Data.current = val;
        return this.saveAndLoad();
      },
      addProject: function(val) {
        TIMETRACKER.Data.current = val;
        TIMETRACKER.Data.data[val] = [];
        return this.saveAndLoad();
      },
      removeProject: function(val) {
        TIMETRACKER.Data.current = 'Default';
        delete TIMETRACKER.Data.data[val];
        return this.saveAndLoad();
      },
      timesChange: function(times) {
        TIMETRACKER.Data.data[this.current] = times;
        return this.saveAndLoad();
      },
      saveTimer: function(insert) {
        var timeItem, times;
        if (insert == null) {
          insert = false;
        }
        times = this.projects[this.current];
        timeItem = {
          startTs: this.startDate.getTime(),
          endTs: new Date().getTime(),
          desc: this._curDesc,
          closed: false
        };
        if (insert) {
          times = [timeItem].concat(slice.call(times));
        } else {
          times = [timeItem].concat(slice.call(times.slice(1)));
        }
        this.projects[this.current] = times;
        return this.saveAndLoad();
      },
      timerToggle: function(running) {
        if (running) {
          this._loopCounter = 0;
          this.startDate = new Date;
          this._curDesc = prompt('Можете ввести пояснение:') || '';
          this._curDesc = this._curDesc.replace(/^\s+|\s+$/g, '');
          this.saveTimer(true);
          return window.requestAnimationFrame(this.loop);
        } else {
          this.saveTimer();
          return this.startDate = null;
        }
      },
      loop: function() {
        this._loopCounter += 1;
        if (this.startDate) {
          if (this._loopCounter % 60 === 0) {
            this.saveTimer();
          }
          requestAnimationFrame(this.loop);
        }
        return null;
      }
    }
  });
  return null;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
