// Generated by CoffeeScript 1.8.0
var TIMETRACKER;

TIMETRACKER = {
  Settings: {
    dataStorageKey: 'timetracker-data'
  },
  CurrentProject: null,
  Data: {}
};

TIMETRACKER.AppViewModel = function() {
  return null;
};

TIMETRACKER.App = function() {
  var changeProject, formatMilliseconds, load, renderFrame, renderProjectsSelect, renderResults, save, startDate, timerEl, toggleEl, toggleTimer;
  timerEl = $('.timer-container a.label');
  toggleEl = $('.timer-container a.btn');
  startDate = null;
  load = function() {
    var data;
    data = localStorage.getItem(TIMETRACKER.Settings.dataStorageKey);
    if (data) {
      TIMETRACKER.Data = JSON.parse(data);
    }
    return null;
  };
  save = function() {
    var data;
    data = JSON.stringify(TIMETRACKER.Data);
    localStorage.setItem(TIMETRACKER.Settings.dataStorageKey, data);
    return null;
  };
  formatMilliseconds = function(ms) {
    var hours, minutes, seconds;
    ms = (ms * .001) | 0;
    seconds = ms % 60;
    minutes = ((ms / 60) % 60) | 0;
    hours = (ms / 60 / 60) | 0;
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    return "" + hours + ":" + minutes + ":" + seconds;
  };
  renderFrame = function() {
    var diff;
    if (startDate) {
      diff = new Date().getTime() - startDate.getTime();
      timerEl.text(formatMilliseconds(diff));
      requestAnimationFrame(renderFrame);
    }
    return null;
  };
  renderResults = function() {
    var html, total;
    total = 0;
    if (!TIMETRACKER.Data[TIMETRACKER.CurrentProject]) {
      TIMETRACKER.Data[TIMETRACKER.CurrentProject] = [];
    }
    if (TIMETRACKER.Data[TIMETRACKER.CurrentProject].length) {
      html = '';
      $.each(TIMETRACKER.Data[TIMETRACKER.CurrentProject], function() {
        var diff, end, start;
        start = new Date(this.startTs).toLocaleString();
        end = new Date(this.endTs).toLocaleString();
        diff = this.endTs - this.startTs;
        html += "<tr data-start=\"" + this.startTs + "\" data-end=\"" + this.endTs + "\">\n    <td>" + start + "</td>\n    <td>" + end + "</td>\n    <td>" + (formatMilliseconds(diff)) + "</td>\n    <td><a href=\"#\" class=\"clear-btn\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></td>\n</tr>";
        return total += diff;
      });
      $('.times').find('.empty').hide().end().find('.results').show().find('tbody').html(html);
    } else {
      $('.times').find('.empty').show().end().find('.results').hide();
    }
    $('.timer-container .total-time .value').text(formatMilliseconds(total));
    return null;
  };
  renderProjectsSelect = function() {
    return $.each(TIMETRACKER.Data, function() {
      return console.log(arguments);
    });
  };
  toggleTimer = function(e) {
    var endDate;
    e.preventDefault();
    if (startDate) {
      toggleEl.find('i.fa').removeClass('fa-pause').addClass('fa-play');
      endDate = new Date;
      TIMETRACKER.Data[TIMETRACKER.CurrentProject].push({
        startTs: startDate.getTime(),
        endTs: endDate.getTime()
      });
      save();
      startDate = null;
      renderResults();
    } else {
      toggleEl.find('i.fa').removeClass('fa-play').addClass('fa-pause');
      startDate = new Date;
      requestAnimationFrame(renderFrame);
    }
    return null;
  };
  changeProject = function() {
    var title;
    title = prompt('Выберите проект');
    TIMETRACKER.CurrentProject = title || 'Default';
    $('.title-container .project-name').text(" — " + TIMETRACKER.CurrentProject);
    renderResults();
    return null;
  };
  timerEl.on('click', toggleTimer);
  toggleEl.on('click', toggleTimer);
  $('.times .results').on('click', '.clear-btn', function(e) {
    var end, removed, start, tr;
    e.preventDefault();
    tr = $(this).parents('tr');
    start = parseFloat(tr.data('start'));
    end = parseFloat(tr.data('end'));
    if (confirm('Действительно хотите удалить\nбез возможности восстановить?')) {
      removed = -1;
      $.each(TIMETRACKER.Data[TIMETRACKER.CurrentProject], function(idx, item) {
        if (item.startTs === start && item.endTs === end) {
          return removed = idx;
        }
      });
      if (removed !== -1) {
        TIMETRACKER.Data[TIMETRACKER.CurrentProject].splice(removed, 1);
        save();
        renderResults();
      }
    }
    return null;
  });
  $('.change-project').on('click', function(e) {
    e.preventDefault();
    changeProject();
    return null;
  });
  load();
  return changeProject();
};

$(function() {
  new TIMETRACKER.App();
  return null;
});
