// Generated by CoffeeScript 2.0.1
var TIMETRACKER;

TIMETRACKER = {
  Settings: {
    dataStorageKey: 'timetracker-data'
  },
  DefaultData: function() {
    return {
      current: 'Default',
      data: {
        'Default': []
      }
    };
  },
  Data: {},
  formatMilliseconds: function(ms) {
    var hours, minutes, seconds;
    ms = (ms * .001) | 0;
    seconds = ms % 60;
    minutes = ((ms / 60) % 60) | 0;
    hours = (ms / 60 / 60) | 0;
    if (seconds < 10) {
      seconds = `0${seconds}`;
    }
    if (minutes < 10) {
      minutes = `0${minutes}`;
    }
    return `${hours}:${minutes}:${seconds}`;
  }
};

Backbone.sync = function(method, model, options = {}) {
  var data, resp;
  //console.log method, model, options
  switch (method) {
    case 'read':
      data = localStorage.getItem(TIMETRACKER.Settings.dataStorageKey);
      if (data) {
        data = JSON.parse(data);
      }
      //console.log data
      data = data || TIMETRACKER.DefaultData();
      resp = _.map(data.data, function(times, project) {
        return {
          name: project,
          current: project === data.current,
          times: new TIMETRACKER.TimesCollection(times)
        };
      });
      break;
    case 'create':
    case 'update':
    case 'delete':
      data = TIMETRACKER.DefaultData();
      TIMETRACKER.Data.each(function(project) {
        if (project.get('current')) {
          data.current = project.get('name');
        }
        return data.data[project.get('name')] = project.get('times').toJSON();
      });
      localStorage.setItem(TIMETRACKER.Settings.dataStorageKey, JSON.stringify(data));
  }
  //resp = TIMETRACKER.Data
  if (resp && options.success) {
    return options.success.call(model, resp, options);
  } else if (options.error) {
    return options.error('Sync error');
  } else {
    return console.error('Sync error');
  }
};

TIMETRACKER.TimeModel = Backbone.Model.extend({
  defaults: {
    closed: false
  },
  start: function() {
    return new Date(this.get('startTs')).toLocaleString('ru-RU');
  },
  end: function() {
    return new Date(this.get('endTs')).toLocaleString('ru-RU');
  },
  diff: function() {
    return this.get('endTs') - this.get('startTs');
  },
  diffMs: function() {
    return TIMETRACKER.formatMilliseconds(this.diff());
  },
  closedCls: function() {
    if (this.get('closed')) {
      return 'closed';
    } else {
      return '';
    }
  },
  hiddenCls: function() {
    return [this.closedCls(), 'm-hidden'].join(' ');
  },
  asDict: function() {
    return {
      checked: this.get('closed') ? 'checked' : '',
      desc: this.get('desc'),
      start: this.start(),
      end: this.end(),
      diff: this.diff(),
      diffMs: this.diffMs(),
      closedCls: this.closedCls(),
      hiddenCls: this.hiddenCls()
    };
  }
});

TIMETRACKER.TimesCollection = Backbone.Collection.extend({
  model: TIMETRACKER.TimeModel
});

TIMETRACKER.TimeView = Backbone.View.extend({
  tagName: 'tr',
  template: _.template($('#time-row-tmpl').html()),
  events: {
    'click .clear-btn': 'removeTime',
    'click .closer': 'closeTime'
  },
  initialize: function() {
    _.bindAll(this, 'render', 'removeTime', 'closeTime', 'remove');
    this.model.bind('change', this.render);
    return this.model.bind('destroy', this.remove);
  },
  removeTime: function(e) {
    e.preventDefault();
    this.model.destroy();
    return null;
  },
  closeTime: function(e) {
    e.preventDefault();
    this.model.set('closed', !this.model.get('closed')).save();
    return null;
  },
  render: function() {
    this.$el.html(this.template(this.model.asDict()));
    return this;
  },
  remove: function() {
    return this.$el.remove();
  }
});

TIMETRACKER.TimesView = Backbone.View.extend({
  el: $('.times'),
  initialize: function() {
    _.bindAll(this, 'render', 'addOneTime');
    this.collection = TIMETRACKER.Data.findWhere({
      current: true
    }).get('times');
    return this.collection.bind('remove', function() {
      return Backbone.sync('update', this.collection);
    });
  },
  render: function() {
    if (this.collection.length) {
      this.$el.find('.results').show().find('tbody').empty();
      this.$el.find('.empty').hide();
      this.collection.each(this.addOneTime);
    } else {
      this.$el.find('.results').hide();
      this.$el.find('.empty').show();
    }
    return this;
  },
  addOneTime: function(time) {
    var view;
    view = new TIMETRACKER.TimeView({
      model: time
    });
    this.$el.find('.results tbody').append(view.render().$el);
    return null;
  }
});

TIMETRACKER.ProjectModel = Backbone.Model.extend({
  defaults: {
    current: false,
    times: []
  }
});

TIMETRACKER.ProjectsCollection = Backbone.Collection.extend({
  model: TIMETRACKER.ProjectModel
});

TIMETRACKER.TitleView = Backbone.View.extend({
  el: $('.title-container'),
  events: {
    'click    .swap-project': 'swapProject',
    'change .select-project': 'selectProject',
    'click  .select-project': 'clickSelectProject',
    'click     .add-project': 'addProject',
    'click  .remove-project': 'removeProject'
  },
  initialize: function() {
    _.bindAll(this, 'render', 'swapProject', 'selectProject', 'clickSelectProject', 'addProject', 'removeProject', 'toggleProjectSelectList', 'closeSelectProject');
    $(window).on('click', this.closeSelectProject);
    return this.collection = TIMETRACKER.Data;
  },
  render: function() {
    var current;
    current = TIMETRACKER.Data.findWhere({
      current: true
    });
    this.$el.find('.project-name').text(` — ${current.get('name')}`);
    return this;
  },
  swapProject: function(e) {
    e.preventDefault();
    e.stopPropagation();
    //if startDate
    //    return alert 'Нельзя переключить пока работает таймер'
    this.toggleProjectSelectList();
    return null;
  },
  selectProject: function(e) {
    //if startDate
    //    return alert 'Нельзя переключить пока работает таймер'
    console.log('selectProject');
    return null;
  },
  clickSelectProject: function(e) {
    e.stopPropagation();
    return null;
  },
  addProject: function(e) {
    var title;
    e.preventDefault();
    //if startDate
    //    return alert 'Нельзя добавить проект пока работает таймер'
    title = prompt('Введите название нового проекта:');
    title = $.trim(title || '');
    if (!title) {
      return alert('Вы не ввели название проекта');
    }
    if (this.collection.pluck('name').indexOf(title) !== -1) {
      return alert('Такой проект уже существует');
    }
    TIMETRACKER.Data.add({
      name: title,
      current: false,
      times: []
    });
    return null;
  },
  removeProject: function(e) {
    e.preventDefault();
    //if startDate
    //    return alert 'Нельзя удалить проект пока работает таймер'
    console.log('removeProject');
    return null;
  },
  closeSelectProject: function(e) {
    e.stopPropagation();
    if ($('.select-project').is(':visible') && !$(e.target).hasClass('select-project')) {
      this.toggleProjectSelectList();
    }
    return null;
  },
  toggleProjectSelectList: function() {
    $('.swap-project').toggle();
    $('.select-project').toggle();
    return null;
  }
});

TIMETRACKER.TimerView = Backbone.View.extend({
  el: $('.timer-container'),
  events: {
    'click  .timer-container a.label': 'toggleTimer',
    'click  .timer-container a.btn': 'toggleTimer'
  },
  initialize: function() {
    return _.bindAll(this, 'render', 'toggleTimer');
  },
  render: function() {
    return this;
  },
  toggleTimer: function(e) {
    e.preventDefault();
    console.log('toggleTimer');
    return null;
  }
});

TIMETRACKER.AppView = Backbone.View.extend({
  el: $('#content-wrapper'),
  initialize: function() {
    _.bindAll(this, 'render');
    TIMETRACKER.Data = new TIMETRACKER.ProjectsCollection();
    TIMETRACKER.Data.fetch();
    return this.render();
  },
  render: function() {
    new TIMETRACKER.TitleView().render();
    new TIMETRACKER.TimerView().render();
    new TIMETRACKER.TimesView().render();
    return this;
  }
});

window.onload = function() {
  return new TIMETRACKER.AppView();
};
