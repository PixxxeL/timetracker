var TIMETRACKER;

TIMETRACKER = {
  Settings: {
    dataStorageKey: 'timetracker-data'
  },
  DefaultData: function() {
    return {
      current: 'Default',
      data: {
        'Default': []
      }
    };
  },
  Data: {},
  formatMilliseconds: function(ms) {
    var hours, minutes, seconds;
    ms = (ms * .001) | 0;
    seconds = ms % 60;
    minutes = ((ms / 60) % 60) | 0;
    hours = (ms / 60 / 60) | 0;
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    return hours + ":" + minutes + ":" + seconds;
  },
  toggleProjectSelectList: function() {
    $('.swap-project').toggle();
    $('.select-project').toggle();
    return null;
  }
};

Backbone.sync = function(method, model, options) {
  var data, resp;
  if (options == null) {
    options = {};
  }
  switch (method) {
    case 'read':
      data = localStorage.getItem(TIMETRACKER.Settings.dataStorageKey);
      if (data) {
        data = JSON.parse(data);
      }
      data = data || TIMETRACKER.DefaultData();
      resp = _.map(data.data, function(times, project) {
        return {
          name: project,
          current: project === data.current,
          times: new TIMETRACKER.TimesCollection(times)
        };
      });
      break;
    case 'create':
    case 'update':
    case 'delete':
      data = TIMETRACKER.DefaultData();
      TIMETRACKER.Data.each(function(project) {
        if (project.get('current')) {
          data.current = project.get('name');
        }
        return data.data[project.get('name')] = project.get('times').toJSON();
      });
      localStorage.setItem(TIMETRACKER.Settings.dataStorageKey, JSON.stringify(data));
      if (model instanceof TIMETRACKER.ProjectsCollection) {
        resp = TIMETRACKER.Data.map(function(project) {
          return project.toJSON();
        });
      }
  }
  if (resp && options.success) {
    return options.success.call(model, resp, options);
  }
};

TIMETRACKER.TimeModel = Backbone.Model.extend({
  defaults: {
    closed: false
  },
  start: function() {
    return new Date(this.get('startTs')).toLocaleString('ru-RU');
  },
  end: function() {
    return new Date(this.get('endTs')).toLocaleString('ru-RU');
  },
  diff: function() {
    return this.get('endTs') - this.get('startTs');
  },
  diffMs: function() {
    return TIMETRACKER.formatMilliseconds(this.diff());
  },
  closedCls: function() {
    if (this.get('closed')) {
      return 'closed';
    } else {
      return '';
    }
  },
  hiddenCls: function() {
    return [this.closedCls(), 'm-hidden'].join(' ');
  },
  asDict: function() {
    return {
      checked: this.get('closed') ? 'checked' : '',
      desc: this.get('desc'),
      start: this.start(),
      end: this.end(),
      diff: this.diff(),
      diffMs: this.diffMs(),
      closedCls: this.closedCls(),
      hiddenCls: this.hiddenCls()
    };
  }
});

TIMETRACKER.TimesCollection = Backbone.Collection.extend({
  model: TIMETRACKER.TimeModel
});

TIMETRACKER.TimeView = Backbone.View.extend({
  tagName: 'tr',
  template: _.template($('#time-row-tmpl').html()),
  events: {
    'click .clear-btn': 'removeTime',
    'click .closer': 'closeTime'
  },
  initialize: function() {
    _.bindAll(this, 'render', 'removeTime', 'closeTime', 'remove');
    this.model.bind('change', this.render);
    return this.model.bind('destroy', this.remove);
  },
  removeTime: function(e) {
    e.preventDefault();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя удалить время пока работает таймер');
    }
    this.model.destroy();
    this.trigger('destroy:time');
    return null;
  },
  closeTime: function(e) {
    e.preventDefault();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя переключить время пока работает таймер');
    }
    this.model.set('closed', !this.model.get('closed')).save();
    this.trigger('update:time');
    return null;
  },
  render: function() {
    this.$el.html(this.template(this.model.asDict()));
    return this;
  },
  remove: function() {
    this.off();
    return this.$el.remove();
  }
});

TIMETRACKER.TimesView = Backbone.View.extend({
  el: $('.times'),
  initialize: function() {
    _.bindAll(this, 'render', 'currentTimes', 'addOneTime');
    this.currentTimes();
    return this.collection.bind('remove', function() {
      return Backbone.sync('update', this.collection);
    });
  },
  render: function() {
    this.currentTimes();
    if (this.collection.length) {
      this.$el.find('.results').show().find('tbody').empty();
      this.$el.find('.empty').hide();
      this.collection.each(this.addOneTime);
    } else {
      this.$el.find('.results').hide();
      this.$el.find('.empty').show();
    }
    return this;
  },
  addOneTime: function(time) {
    var timesView, view;
    timesView = this;
    view = new TIMETRACKER.TimeView({
      model: time
    });
    view.on('destroy:time update:time', function() {
      return timesView.trigger('update:times');
    });
    this.$el.find('.results tbody').append(view.render().$el);
    return null;
  },
  currentTimes: function() {
    return this.collection = TIMETRACKER.Data.findWhere({
      current: true
    }).get('times');
  }
});

TIMETRACKER.ProjectModel = Backbone.Model.extend({
  defaults: {
    current: false,
    times: []
  },
  asDict: function() {
    return {
      selected: this.get('current') ? 'selected' : '',
      name: this.get('name')
    };
  }
});

TIMETRACKER.ProjectsCollection = Backbone.Collection.extend({
  model: TIMETRACKER.ProjectModel
});

TIMETRACKER.ProjectView = Backbone.View.extend({
  tagName: 'option',
  initialize: function() {
    return _.bindAll(this, 'render');
  },
  render: function() {
    var name;
    name = this.model.get('name');
    this.$el.text(name).val(name).attr('selected', this.model.get('current'));
    return this;
  }
});

TIMETRACKER.ProjectsView = Backbone.View.extend({
  el: $('select.select-project'),
  events: {
    'change': 'selectProject',
    'click': 'clickSelectProject'
  },
  initialize: function() {
    _.bindAll(this, 'render', 'addOneProject', 'selectProject', 'clickSelectProject');
    return this.collection = TIMETRACKER.Data;
  },
  render: function() {
    this.$el.empty();
    if (this.collection.length) {
      this.collection.each(this.addOneProject);
    }
    return this;
  },
  addOneProject: function(project) {
    var view;
    view = new TIMETRACKER.ProjectView({
      model: project
    });
    this.$el.append(view.render().$el);
    return null;
  },
  selectProject: function(e) {
    var collection, value;
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя выбрать проект пока работает таймер');
    }
    value = this.$el.val();
    collection = this.collection;
    collection.forEach(function(model) {
      return model.set('current', value === model.get('name'));
    });
    collection.trigger('toggle');
    TIMETRACKER.toggleProjectSelectList();
    return null;
  },
  clickSelectProject: function(e) {
    e.stopPropagation();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя, пока работает таймер');
    }
    return null;
  }
});

TIMETRACKER.TitleView = Backbone.View.extend({
  el: $('.title-container'),
  events: {
    'click   .swap-project': 'swapProject',
    'click    .add-project': 'addProject',
    'click .remove-project': 'removeProject'
  },
  initialize: function() {
    _.bindAll(this, 'render', 'swapProject', 'addProject', 'removeProject', 'closeSelectProject');
    $(window).on('click', this.closeSelectProject);
    this.collection = TIMETRACKER.Data;
    return this.projectsView = new TIMETRACKER.ProjectsView();
  },
  render: function() {
    var current;
    current = TIMETRACKER.Data.findWhere({
      current: true
    });
    this.$el.find('.project-name').text(" — " + (current.get('name')));
    this.projectsView.render();
    return this;
  },
  swapProject: function(e) {
    e.preventDefault();
    e.stopPropagation();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя переключить проект пока работает таймер');
    }
    TIMETRACKER.toggleProjectSelectList();
    return null;
  },
  addProject: function(e) {
    var title;
    e.preventDefault();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя добавить проект пока работает таймер');
    }
    title = prompt('Введите название нового проекта:');
    title = $.trim(title || '');
    if (!title) {
      return alert('Вы не ввели название проекта');
    }
    if (this.collection.pluck('name').indexOf(title) !== -1) {
      return alert('Такой проект уже существует');
    }
    this.collection.forEach(function(model) {
      return model.set('current', false);
    });
    this.collection.add({
      name: title,
      current: true,
      times: new TIMETRACKER.TimesCollection
    });
    this.collection.trigger('toggle');
    return null;
  },
  removeProject: function(e) {
    var current;
    e.preventDefault();
    if ($('#content-wrapper').hasClass('lock')) {
      return alert('Нельзя удалить проект пока работает таймер');
    }
    if (!confirm('Вы действительно хотите БЕЗВОЗВРАТНО удалить проект?')) {
      return;
    }
    current = this.collection.findWhere({
      current: true
    });
    if ('Default' === current.get('name')) {
      return alert('Нельзя удалить проект `Default`');
    }
    this.collection.remove(current);
    this.collection.forEach(function(model) {
      return model.set('current', 'Default' === model.get('name'));
    });
    this.collection.trigger('toggle');
    return null;
  },
  closeSelectProject: function(e) {
    e.stopPropagation();
    if ($('.select-project').is(':visible') && !$(e.target).hasClass('select-project')) {
      TIMETRACKER.toggleProjectSelectList();
    }
    return null;
  }
});

TIMETRACKER.TimerView = Backbone.View.extend({
  el: $('.timer-container'),
  events: {
    'click a.label': 'toggleTimer',
    'click a.btn': 'toggleTimer'
  },
  initialize: function() {
    this.calcTotal();
    this.model = null;
    this.timerEl = this.$el.find('a.label');
    this.btnEl = this.$el.find('i.fa');
    this.totalEl = this.$el.find('.total-time .total.value').text(TIMETRACKER.formatMilliseconds(this.total));
    this.openedEl = this.$el.find('.total-time .opened.value').text(TIMETRACKER.formatMilliseconds(this.opened));
    return _.bindAll(this, 'render', 'toggleTimer', 'syncCollection', 'calcTotal');
  },
  render: function() {
    var diff, endTs, format;
    this.loopCounter += 1;
    format = TIMETRACKER.formatMilliseconds;
    if (this.model) {
      endTs = new Date().getTime();
      diff = endTs - this.model.get('startTs');
      this.timerEl.text(format(diff));
      this.totalEl.text(format(diff + this.total));
      this.openedEl.text(format(diff + this.opened));
      this.model.set('endTs', endTs);
      requestAnimationFrame(this.render);
    } else {
      this.calcTotal();
      this.totalEl.text(format(this.total));
      this.openedEl.text(format(this.opened));
    }
    return this;
  },
  toggleTimer: function(e) {
    var ts;
    e.preventDefault();
    $('#content-wrapper').toggleClass('lock');
    if (this.model) {
      this.btnEl.removeClass('fa-pause').addClass('fa-play');
      this.model.unbind('change', this.syncCollection);
      this.model = null;
    } else {
      this.btnEl.removeClass('fa-play').addClass('fa-pause');
      this.loopCounter = 0;
      ts = new Date().getTime();
      this.model = new TIMETRACKER.TimeModel({
        startTs: ts,
        endTs: ts,
        desc: (prompt('Можете ввести пояснение:') || '').trim()
      });
      this.model.bind('change', this.syncCollection);
      this.collection = TIMETRACKER.Data.findWhere({
        current: true
      });
      this.collection.get('times').unshift(this.model);
      requestAnimationFrame(this.render);
    }
    this.trigger('update:periodic');
    return null;
  },
  syncCollection: function() {
    if (this.model) {
      return Backbone.sync('update', TIMETRACKER.Data);
    }
  },
  calcTotal: function() {
    this.collection = TIMETRACKER.Data.findWhere({
      current: true
    });
    this.total = this.collection.get('times').reduce(function(prev, model) {
      return prev + model.diff();
    }, 0);
    return this.opened = this.collection.get('times').reduce(function(prev, model) {
      return prev + (model.get('closed') ? 0 : model.diff());
    }, 0);
  }
});

TIMETRACKER.AppView = Backbone.View.extend({
  id: 'content-wrapper',
  initialize: function() {
    _.bindAll(this, 'render');
    TIMETRACKER.Data = new TIMETRACKER.ProjectsCollection();
    TIMETRACKER.Data.fetch();
    TIMETRACKER.Data.on('toggle', function() {
      return Backbone.sync('update', TIMETRACKER.Data, {
        success: this.render
      });
    }, this);
    this.titleView = new TIMETRACKER.TitleView();
    this.timerView = new TIMETRACKER.TimerView();
    this.timesView = new TIMETRACKER.TimesView();
    this.timesView.on('update:times', this.timerView.render);
    this.timerView.on('update:periodic', this.timesView.render);
    return this.render();
  },
  render: function() {
    this.titleView.render();
    this.timerView.render();
    this.timesView.render();
    return this;
  }
});

window.onload = function() {
  return new TIMETRACKER.AppView();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
